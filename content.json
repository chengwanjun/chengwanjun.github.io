[{"title":"博客搭建 demo","date":"2017-09-12T06:24:51.000Z","path":"2017/09/12/博客搭建-demo/","text":"什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 github 的 pages 服务Github Page是github提供的静态站点服务，在github创建userName.github.io的仓库，将静态html文件上传到该仓库，就可以通过 https://chengwanjun.github.io 进行访问了，具体设置见： https://pages.github.com/","tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"}]},{"title":"markdown 语法 demo","date":"2017-09-05T09:45:24.000Z","path":"2017/09/05/markdown-语法-demo/","text":"二级标题 main content 1. 代码块123if(true)&#123; alert(1)&#125; 2. 无序列表 _config.yml 站点配置文件，很多全局配置都在这个文件中。 package.json 应用数据。从它可以看出hexo版本信息，以及它所默认或者说依赖的一些组件。 3. 粗体 哈哈，我是加粗的字体 4. 链接与图片baidu1234 // 插入图片![hello](/images/luhan.jpg) // markdown 语法&#123;% img /images/luhan.jpg 400 180 hello %&#125; // hexo 标签插件&lt;img src=\"/images/luhan.jpg\" width=\"200px\" alt=\"hello\"/&gt; // 也可用html标签 5. 分割线 6. 引用，markdown语法 健康的快速建安费 7. 引用块，如引用网络上的文章，hexo标签Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing","tags":[{"name":"test","slug":"test","permalink":"http://yoursite.com/tags/test/"}]},{"title":"浅析 Hexo 搭建博客","date":"2017-08-25T09:22:03.000Z","path":"2017/08/25/study/浅析-Hexo-搭建博客/","text":"什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 github 的 pages 服务Github Page是github提供的静态站点服务，在github创建userName.github.io的仓库，将静态html文件上传到该仓库，就可以通过 https://chengwanjun.github.io 进行访问了，具体设置见： https://pages.github.com/ 安装前提：安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js Git如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。1$ npm install -g hexo-cli 建站：安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 配置：_config.yml 网站的配置信息，您可以在此配置大部分的参数。其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 写作：1、启动服务器。默认情况下，访问网址为： http：//localhost：4000/。也可重设端口,如 $ hexo server -p 80011$ hexo server 2、新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。1$ hexo new [layout] &lt;title&gt; 部署：部署主要是根据在 _config.yml 中配置的 git 仓库，将 public 文件上传至 github 中。然后再根据上面的 github 提供的 pages 服务呈现出页面。1、生成静态文件。将我们的数据和界面相结合生成静态文件的过程1$ hexo generate 2、部署网站。1$ hexo deploy HexoBlog部署到Git我们需要确保安装hexo-deployer-git插件。还需先在 _config.yml 中修改参数，一个正确的部署配置中至少要有 type 参数。例如：1234deploy： type： git # 部署方式（git/heroku/rsync/openshift/ftpsync） repo： https：//github.com/chengwanjun/chengwanjun.github.io.git branch： master 清除缓存1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"hexo docs","date":"2017-08-25T02:22:03.000Z","path":"2017/08/25/study/hexo-docs/","text":"（一）开始准备1、安装安装hexo的前提是要有Node.js以及Git，至于什么是Git和Node以及如何安装他们可以自行搜索了解。安装完Node以及Git后，通过下面的命令安装Hexo:1npm install -g hexo-cli 2、启动在电脑中找个目录，并进入目录，执行下面几个命令，hexo就准备就绪了。123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install上面两条命令，第一条是初始化目录，会自动生成一些基础文件和目录，第二条命令是安装运行hexo的一些必要的组件。OK，运行完，你会看到你的当前目录下，会自动创建一些目录，如下：12345678.├── _config.yml├── package.json├── scaffolds/├── source/| ├── _drafts| └── _posts└── themes/ 下面依次介绍上面各个文件或者目录的用途： _config.yml 站点配置文件，很多全局配置都在这个文件中。 package.json 应用数据。从它可以看出hexo版本信息，以及它所默认或者说依赖的一些组件。 scaffolds 模版文件。当你创建一篇新的文章时，hexo会依据模版文件进行创建，主要用在你想在每篇文章都添加一些共性的内容的情况下。 source 这个文件夹就是放文章的地方了，除了文章还有一些主要的资源，比如文章里的图片，文件等等东西。这个文件夹最好定期做一个备份，丢了它，整个站点就废了。 themes 主题文件夹。 3、配置主要配置就是_config.yml这个文件了，所以来看看怎么配置它了。配置也是分了几个大块。 （1）首先是Site部分，也就是站点的一些参数设置，如下：123456title: wanjun.cheng's blog # 站点名字，也就是html的title，会显示在浏览器标签上。subtitle: follow me # 站点副标题，会显示在首页上，可以不填。description: wanjun、wanjun.cheng、前端、blog # 站点描述，可以不填。author: wanjun.cheng # 作者language: zh-CN # 网站使用的语言timezone: # 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 （2）URL部分设置：1234url: http://yoursite.com # 站点网址root: / # 网站根目录permalink: :year/:month/:day/:title/ # 文章的永久网址链接，默认是:year/:month/:day/:title/，指的什么意思？比如我一篇叫『love』的文章是在2012年1月1日写的，那么它对应的链接就是 http://yoururl/2012/01/01/love/ ，permalink_defaults: # 永久链接中各部分的默认值 如果网址是次级目录，比如：http://example.com/blog ，那么就要设置url为 http://example.com/blog ，并且root要设置为/blog/。 （3）再接下来就是目录配置：12345678source_dir: source # 资源文件夹，这个文件夹用来存放内容public_dir: public # 公共文件夹，这个文件夹用于存放生成的站点文件。tag_dir: tags # tag目录archive_dir: archives # 归档文件夹category_dir: categories # 分类目录code_dir: downloads/code # 代码目录i18n_dir: :lang # i18n目录skip_render: # 不想被渲染的路径上面这一部分的值，我基本上没有改过，默认的就行了。 （4）接着是写作配置了：1234567891011121314new_post_name: :title.md # 新建文章默认文件名，默认值为 :title.md，比如你执行命令hexo new hello，就会默认在_post目录下创建一个hello.md的文件。default_layout: post # 默认布局titlecase: false # 把标题转换为 title caseexternal_link: true # 在新标签中打开链接filename_case: 0 # 转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行。render_drafts: false # 是否渲染_drafts目录下的文章，默认为falsepost_asset_folder: true # 启动 Asset 文件夹（---相对路径引用的标签插件配置---）relative_link: false # 把链接改为与根目录的相对位址future: true # 显示未来的文章highlight: # 代码块的设置 enable: true line_number: true auto_detect: true tab_replace:这一部分也可以基本不变，默认值就行。 （5）接下来是分类和标签的设置：123default_category: uncategorized # 默认分类，默认为无分类，当然你可以设置一个默认分类。category_map:tag_map: （6）日期和时间格式配置：Hexo使用的Moment.js来处理时间的。12date_format: YYYY-MM-DD # 日期格式，默认为MMM D YYYY，我将它改成了YYYY-MM-DD，其他格式模版可以查看Moment.jstime_format: HH:mm:ss # 时间格式，默认为HH:mm:ss （7）分页设置：12per_page: 10 # 一页显示多少篇文章，0 为不分页，默认值为 10pagination_dir: page # 分页目录，默认值为page （8）最后就是扩展配置：12345theme: BlueLake # 主题配置，此处填上主题名就OK了，当然在themes目录下一定要有你配置的主题文件夹。deploy: # 部署配置，将本地public目录也就是网站部署到服务器上的配置。 type: git repo: https://github.com/chengwanjun/chengwanjun.github.io.git # 库（Repository）地址 branch: master 4、常用命令这块主要介绍hexo的一些命令的使用方法。 hexo init [folder]，使用该命令初始化一个站点，不加目录参数，就初始化当前目录 hexo new [layout] title， 创建一篇文章，如果不指定layout，那么就使用_config.yml中default_layout的值，标题中如果有空格，将整个title放到引号中。比如，hexo new “hello world”创建一篇叫hello world的文章。 hexo generate，简单的说，这个命令就是将md格式的文章，生成静态网页 hexo server，启动一个本地服务，可以在本地查看网站，默认启动 http://localhost:4000 ，貌似这个不是默认，运行命令的时候可以查看提示消息。 hexo deploy 部署站点，可以缩写hexo d，有一个参数，hexo d -g表示在部署前先重新生成一下站点 hexo clean 删除缓存文件db.json以及生成的public目录，当你修改了某些样式或者配置时，如果发现hexo g后也没有反应，就可以执行一下这个命令。 （二）基本用法1、写作写作之前当然得先创建一个.md文件，使用命令hexo new [layout] ，其中layout默认为post，前面提过。（1）Layout布局Hexo提供了3种默认的布局，post、page和draft，路径分别为：source/_posts、source、source/_draft。如果你将在文章前置申明中，将layout设置为false，那么这篇文章将不会有任何的布局。 （2）Filename文件名Hexo会默认将文章的标题当做文件名，但是你可以编辑_config.yml配置文件中的new_post_name来改变默认的文件名。 例如：使用hexo new hello命令创建一篇为hello文章，Hexo会默认在_posts目录下给你创建一个名为hello.md的文件。假如你将new_post_name改为了:year-:month-:day-:title.md，那么hexo就自动帮你创建名为2015-05-16-hello.md（当前日期为2015年5月16） （3）Drafts草稿Hexo提供草稿功能，在_drafts目录下的文章不会发表到网站上，你可以通过命令hexo publish [layout] 发布你的草稿，改命令会将文章移到_posts目录下。但是也可以设置_config.yml配置文件的render_drafts字段，使草稿默认发布到站点中。 （4）Scaffolds模版当你使用new命令创建一篇文章的时候，Hexo会根据scaffolds目录中的模版帮你生成文章。假如执行hexo new photo “My Gallery”，Hexo会尝试在scaffolds目录中去寻找photo.md的模版文件，然后基于它创建标题为My Gallery的文章。它的用处就是能够在模版中写入你某一类文章都要添加的共同内容，这样你基于模版创建文章的时候，就不用再重复写入那部分内容。 2、前置申明顾名思义，就是写在文章前面的一块内容，为了对文章进行某些设置。它有两种书写方式：YAML方式，以三短线结束123title: Hello Worlddate: 2013/7/13 20:46:25--- JSON方式，以三分号结束123\"title\": \"Hello World\",\"date\": \"2013/7/13 20:46:25\";;; 下面看看有哪些参数可以设定： layout 布局，一般不用写，默认就行 title 标题，这个必须要有 date 时间 updated 修改时间 comments 是否开启评论，默认为true tags 文章标签 categories 文章分类 permalink 文章永久链接，一般不用写，默认就行 在写标签和分类的时候，可能会有多个的情况，多个标签可以无序排列的方式书写，而分类可能会有多级分类的情况。如何书写举例如下：1234567categories:- Sports- Baseballtags:- Injury- Fight- Shocking 3、标签插件它可以帮助你在文章中快速嵌入一些特殊的内容。 （1）引用块 没有提供参数，则只输出普通的 blockquote1234&#123;% blockquote %&#125;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat.Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&#123;% endblockquote %&#125; 页面效果：Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat.Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 引用书上的例子123&#123;% blockquote David Levithan, Wide Awake %&#125;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&#123;% endblockquote %&#125; 页面效果：Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 引用 Twitter123&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;NEW: DevDocs now comes with syntax highlighting. http://devdocs.io&#123;% endblockquote %&#125; 页面效果：NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 引用网络上的文章123&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;Every interaction is both precious and an opportunity to delight.&#123;% endblockquote %&#125; 页面效果：Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing （2）代码块 普通代码块123&#123;% codeblock %&#125;alert('Hello World!');&#123;% endcodeblock %&#125; 页面效果：1alert('Hello World!'); 指定语言123&#123;% codeblock lang:objc %&#125;[rectangle setX: 10 y: 10 width: 20 height: 20];&#123;% endcodeblock %&#125; 页面效果：1[rectangle setX: 10 y: 10 width: 20 height: 20]; 附加说明123&#123;% codeblock Array.map %&#125;array.map(callback[, thisArg])&#123;% endcodeblock %&#125; 页面效果：Array.map1array.map(callback[, thisArg]) 附加说明和网址1234&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js %&#125;_.compact([0, 1, false, 2, '', 3]);=&gt; [1, 2, 3]&#123;% endcodeblock %&#125; 页面效果：_.compactUnderscore.js12_.compact([0, 1, false, 2, '', 3]);=&gt; [1, 2, 3] （3）反引号代码块1``` [language] [title] [url] [link text] code snippet ``` 页面效果：1[language] [title] [url] [link text] code snippet （4）在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。1&#123;% link 百度链接 https://www.baidu.com/ [external] [title] %&#125; 页面效果：百度链接 （5）在文章中插入指定大小的图片。1&#123;% img [class name] /images/luhan.jpg 300 540 hello luhan %&#125; 页面效果： （6）从资源目录中插入代码片段： —–question1&#123;% include_code [title] [lang:language] path/to/file %&#125; （7）包含其他文章的链接。 —–question12&#123;% post_path slug %&#125;&#123;% post_link slug [title] %&#125; （8）包含文章资源。 —–question123&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125;&#123;% asset_link slug [title] %&#125; 4、资源文件夹 —–questionAssets指的是那些不在source目录下的资源，比如图片、CSS文件或者Javascript文件。Hexo提供一种更方便的方法来管理这些资源（Assets）。想使其生效，首先修改post_asset_folder字段的设置，将其值改为true。当生效后，在你创建文章的时候，Hexo会创建一个同名目录，你可以将该文章关联的资源全部放到该目录下。这样就可以更加方便的使用它们了。使用方法就是上面介绍过的标签插件。 123&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125; # 例如： &#123;% asset_img luhan.jpg this is a demo %&#125; 通过这种方式，图片将会同时出现在文章和主页以及归档页中。&#123;% asset_link slug [title] %&#125; 5、数据文件夹 —–question有时，你可能会使用一些不在post中的模版数据，或者你想复用这些数据，那么你可以试用一下Hexo3中的『Data files』功能。这个特性加载source/_data目录中的YAML或者JSON文件，从而用到你的网站中。例如，在source/_data目录中添加menu.yml文件。内容如下：123Home: /Gallery: /gallery/Archives: /archives/ 您就能在模板中使用这些资料：123&lt;% for (var link in site.data.menu) &#123; %&gt; &lt;a href=\"&lt;%= site.data.menu[link] %&gt;\"&gt; &lt;%= link %&gt; &lt;/a&gt;&lt;% &#125; %&gt; 6、服务器（1）Hexo server 在Hexo3中，服务器模块从主模块中分开了，你可以通过安装hexo-server来使用它。1npm install hexo-server --save 安装完成后，通过运行命令hexo server来启动本地服务。可以通过 http://localhost:4000 或者 http://0.0.0.0:4000 来访问你的网站。服务启动后，Hexo会监视文件的改动情况并且自动更新，也就是说你修改网站内容后不必重启服务器就可以见到效果。 如果你想修改端口，可以通过 hexo server -p 5000 命令来指定端口。 hexo server -s启动静态模式，在静态模式中，只有public文件夹下的文件才会被放到服务器上，并且文件监听功能关闭。你可以在运行hexo g命令后运行该命令，通常用于生产系统中。 hexo server -i 192.168.1.1指定IP访问，可以替代默认的0.0.0.0. （2）Pow Pow是Mac上一个零配置的服务架构。通过 curl get.pow.cx | sh 命令下载并安装该软件；然后链接到项目文件夹中，步骤如下：12cd ~/.powln -s /path/to/myapp index 通过上面命令，会在~/.pow目录下创建一个index的链接文件指向你的hexo根目录，然后你就可以通过访问 http://index.dev 就可以看到你的主页了。 7、生成器这个很简单，hexo generate一条命令生成静态站点。可以使用缩写hexo g，还可以显示你修改的文件并且重新生成，使用命令hexo g –watch，还用两种用法可以跟部署结合起来，hexo g -d or hexo d -g，指的是生成后马上部署站点。 8、部署部署的方式有多种，这里我主要介绍一下Git的方式，因为GitHub提供Pages功能，可以直接将站点部署到Github上。主要就是设置_config.yml配置文件，1234deploy: type: git repo: https://github.com/chengwanjun/chengwanjun.github.io.git # 库（Repository）地址 branch: master 这样就设置好了，注意将repo改成自己的。其他方式类似。部署命令很简单，hexo d就OK了。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"hexo 多语种支持","date":"2017-08-22T03:03:01.000Z","path":"2017/08/22/tw/hexo多语种支持/","text":"多语种支持若要建立一个多语种的网站，您可修改_config.yml中 new_post_name 和 permalink 参数，如下：12new_post_name: :lang/:title.mdpermalink: :lang/:title/ 当您建立新文章时，文章会被储存到：$ hexo new &quot;Hello World&quot; --lang tw路径：source/_posts/tw/Hello-World.md 而网址会是：http://localhost:4000/tw/hello-world/","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"深入理解this取值","date":"2017-08-21T01:30:57.000Z","path":"2017/08/21/javascript/深入理解this取值/","text":"深入理解this取值 在编程过程中常会遇到this,但是大多情况我不知道他到底代表的是什么。自从后来花了一段时间深入,觉得其实就还好了。this可以分为以下四种情况: 构造函数 所谓构造函数就是用来new对象的函数。其实严格来说，所有的函数都可以new一个对象，但是有些函数的定义是为了new一个对象，而有些函数则不是。 function Fobj(){ this.name = &quot;wanjun&quot;; this.year = 1991; console.log(this); //此时指代Fun这个对象 } var f1 = new Fobj(); console.log(this.name); //wanjun 以上代码，如果函数作为构造函数用，this就代表它new出来的对象。但是仅限new Fobj()的情况,如果直接调用Fobj函数，情况就不一样了: function Fobj(){ this.name = &quot;wanjun&quot;; this.year = 1991; console.log(this); //此时指代Window } Fobj(); 如果在构造函数的prototype中，this具体指代什么呢: function Fn(){ this.name = &quot;wanjun&quot;; this.year = 1991; } Fn.prototype.getName = function(){ console.log(this.name); //wanjun } var f1 = new Fn(); f1.getName(); //wanjun 函数作为对象的一个属性 如果函数作为对象的一个属性时，并且作为对象的一个属性被调用时，函数中的this指向该对象。 var obj = { x : 10, fn: function(){ console.log(this); //Object {x:10, fn:function} console.log(this.x); //10 } } obj.fn(); 但是，如果fn函数不作为obj的一个属性被调用，情况就又不一样了: var obj = { x : 10, fn: function(){ console.log(this); //window console.log(this.x); //underfined } } var fn1 = obj.fn; fn1(); 如上，如果fn函数被赋值到另一个变量中，并没有作为obj的一个属性被调用，那么this的值就是window，this.x就为underfined。 函数用call或者apply调用 当一个函数被call或者apply调用时，this的值就取传入的对象的值。 var obj = { x : 10 }; var fn = function(){ console.log(this); //object{x : 10} console.log(this.x); //10 } fn.call(obj); 全局 &amp; 调用普通函数 在全局环境下，this永远指代window。 console.log(this === window); //true 普通函数在调用时，其中的this也都是指代window。不过以下情况需要注意: var obj = { x : 10, fn : function(){ function f(){ console.log(this); //window console.log(this.x); //underfined } f(); } } obj.fn(); 函数f虽然是在obj.fn内定义的，但是它任然是一个普通的函数，this指向window。","tags":[{"name":"this","slug":"this","permalink":"http://yoursite.com/tags/this/"}]},{"title":"Hello World","date":"2017-08-20T07:18:58.720Z","path":"2017/08/20/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]